---
import { actions, isInputError } from 'astro:actions';
const result = Astro.getActionResult(actions.contact);
console.log('Contact Form Result:', result);

const isSuccess = result?.data?.success;
const errors = result?.error && isInputError(result.error) ? result.error.fields : {};
---

<div class="contact-form max-w-2xl mx-auto p-8">
	<div class="text-center mb-12">
		<h1 class="text-4xl font-bold mb-4">Get in touch</h1>
		<p class="text-gray-600 text-lg mb-2">Have any questions about your order or feedback about our service?</p>
		<p class="text-gray-600 italic">We'd love to hear from you.</p>
	</div>

	{
		isSuccess && result.data && (
			<div class="alert success mb-8 p-4 bg-green-50 border border-green-200 rounded-lg">
				<h3 class="text-green-800 font-semibold">Message Sent Successfully!</h3>
				<p class="text-green-700">{result.data.message}</p>
				<small class="text-green-600">Reference ID: {result.data.contactId}</small>
			</div>
		)
	}

	{
		result?.error && !isSuccess && (
			<div class="alert error mb-8 p-4 bg-red-50 border border-red-200 rounded-lg">
				{isInputError(result.error) ? (
					<div>
						<h3 class="text-red-800 font-semibold mb-2">Please fix the following errors:</h3>
						<ul class="text-red-700 space-y-1">
							{Object.entries(errors).map(([field, fieldErrors]) => {
								const errorList = Array.isArray(fieldErrors) ? fieldErrors : [fieldErrors];
								return errorList.map((error) => (
									<li>
										â€¢ <strong class="capitalize">{field}:</strong> {error}
									</li>
								));
							})}
						</ul>
					</div>
				) : (
					<div>
						<h3 class="text-red-800 font-semibold">Submission Error</h3>
						<p class="text-red-700">{result.error.message}</p>
						{result.error.code && <small class="text-red-600">Error code: {result.error.code}</small>}
					</div>
				)}
			</div>
		)
	}

	<form method="POST" action={actions.contact} class="form space-y-6">
		<!-- Name Row - Two fields side by side -->
		<div class="grid grid-cols-1 md:grid-cols-2 gap-4">
			<div class="form-group">
				<label for="firstname" class="sr-only">First Name</label>
				<input
					transition:persist
					type="text"
					id="firstname"
					name="name"
					required
					class={`w-full px-4 py-4 border-2 rounded-xl text-base placeholder-gray-400 transition-colors
            ${errors.name ? 'border-red-300 bg-red-50' : 'border-gray-200 focus:border-blue-400'} 
            focus:outline-none focus:ring-0`}
					placeholder="First name"
					autocomplete="given-name"
				/>
				{errors.name && <span class="field-error block mt-2 text-red-600 text-sm">{errors.name}</span>}
			</div>

			<div class="form-group">
				<label for="lastname" class="sr-only">Last Name</label>
				<input
					transition:persist
					type="text"
					id="lastname"
					name="surname"
					required
					class={`w-full px-4 py-4 border-2 rounded-xl text-base placeholder-gray-400 transition-colors
            ${errors.surname ? 'border-red-300 bg-red-50' : 'border-gray-200 focus:border-blue-400'} 
            focus:outline-none focus:ring-0`}
					placeholder="Last name"
					autocomplete="family-name"
				/>
				{errors.surname && <span class="field-error block mt-2 text-red-600 text-sm">{errors.surname}</span>}
			</div>
		</div>

		<div class="grid grid-cols-1 md:grid-cols-2 gap-4">
			<!-- Email with Icon -->
			<div class="form-group relative">
				<label for="email" class="sr-only">Email Address</label>
				<div class="relative">
					<input
						transition:persist
						type="email"
						id="email"
						name="email"
						required
						class={`w-full px-4 py-4 pl-12 border-2 rounded-xl text-base placeholder-gray-400 transition-colors
              ${errors.email ? 'border-red-300 bg-red-50' : 'border-gray-200 focus:border-blue-400'} 
              focus:outline-none focus:ring-0`}
						placeholder="Email address"
						autocomplete="email"
					/>
					<div class="absolute inset-y-0 left-0 pl-4 flex items-center pointer-events-none">
						<svg class="w-5 h-5 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
							<path
								stroke-linecap="round"
								stroke-linejoin="round"
								stroke-width="2"
								d="M16 12a4 4 0 10-8 0 4 4 0 008 0zm0 0v1.5a2.5 2.5 0 005 0V12a9 9 0 10-9 9m4.5-1.206a8.959 8.959 0 01-4.5 1.207"
							></path>
						</svg>
					</div>
				</div>
				{errors.email && <span class="field-error block mt-2 text-red-600 text-sm">{errors.email}</span>}
			</div>

			<!-- Phone with Icon -->
			<div class="form-group relative">
				<label for="phone" class="sr-only">Phone Number</label>
				<div class="relative">
					<input
						transition:persist
						type="tel"
						id="phone"
						name="phone"
						required
						class={`w-full px-4 py-4 pl-12 border-2 rounded-xl text-base placeholder-gray-400 transition-colors
              ${errors.phone ? 'border-red-300 bg-red-50' : 'border-gray-200 focus:border-blue-400'} 
              focus:outline-none focus:ring-0`}
						placeholder="(###) ###-####"
						autocomplete="tel"
					/>
					<div class="absolute inset-y-0 left-0 pl-4 flex items-center pointer-events-none">
						<svg class="w-5 h-5 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
							<path
								stroke-linecap="round"
								stroke-linejoin="round"
								stroke-width="2"
								d="M3 5a2 2 0 012-2h3.28a1 1 0 01.948.684l1.498 4.493a1 1 0 01-.502 1.21l-2.257 1.13a11.042 11.042 0 005.516 5.516l1.13-2.257a1 1 0 011.21-.502l4.493 1.498a1 1 0 01.684.949V19a2 2 0 01-2 2h-1C9.716 21 3 14.284 3 6V5z"
							></path>
						</svg>
					</div>
				</div>
				{errors.phone && <span class="field-error block mt-2 text-red-600 text-sm">{errors.phone}</span>}
			</div>
		</div>

		<!-- Message -->
		<div class="form-group">
			<label for="message" class="sr-only">Message</label>
			<textarea
				transition:persist
				id="message"
				name="message"
				required
				class={`w-full px-4 py-4 border-2 rounded-xl text-base placeholder-gray-400 transition-colors resize-none
          ${errors.message ? 'border-red-300 bg-red-50' : 'border-gray-200 focus:border-blue-400'} 
          focus:outline-none focus:ring-0`}
				rows="6"
				placeholder="Message"></textarea>
			{errors.message && <span class="field-error block mt-2 text-red-600 text-sm">{errors.message}</span>}
			<div class="char-counter mt-2 text-right">
				<small class="text-gray-500"><span class="count">0</span> / 1000</small>
			</div>
		</div>

		<!-- Submit Button -->
		<div class="form-actions text-right">
			<button
				type="submit"
				class="btn primary bg-black text-white px-8 py-4 rounded-full font-medium text-lg hover:bg-gray-800 transition-colors disabled:opacity-50 cursor-pointer"
			>
				<span class="btn-text">Send message</span>
				<span class="btn-loading hidden">Sending...</span>
			</button>
		</div>
	</form>
</div>

<script>
	const phoneInput = document.getElementById('phone') as HTMLInputElement;
	const messageTextarea = document.getElementById('message') as HTMLTextAreaElement;
	const charCounter = document.querySelector('.char-counter .count') as HTMLSpanElement;
	const form = document.querySelector('.form') as HTMLFormElement;
	const submitButton = form?.querySelector('button[type="submit"]') as HTMLButtonElement;

	// Phone formatting (US format)
	if (phoneInput) {
		phoneInput.addEventListener('input', (e) => {
			const target = e.target as HTMLInputElement;
			let value = target.value.replace(/\D/g, '');

			// Format as (XXX) XXX-XXXX
			if (value.length >= 6) {
				value = `(${value.slice(0, 3)}) ${value.slice(3, 6)}-${value.slice(6, 10)}`;
			} else if (value.length >= 3) {
				value = `(${value.slice(0, 3)}) ${value.slice(3)}`;
			}

			target.value = value;
		});

		// Handle paste events
		phoneInput.addEventListener('paste', (e) => {
			setTimeout(() => {
				const value = phoneInput.value.replace(/\D/g, '');
				if (value.length === 10) {
					phoneInput.value = `(${value.slice(0, 3)}) ${value.slice(3, 6)}-${value.slice(6, 10)}`;
				}
			}, 0);
		});
	}

	if (messageTextarea && charCounter) {
		const updateCharCounter = () => {
			const length = messageTextarea.value.length;
			charCounter.textContent = length.toString();

			// Color coding
			const counterElement = charCounter.parentElement!;
			if (length > 900) {
				counterElement.className = 'char-counter mt-2 text-right text-red-500 font-semibold';
			} else if (length > 800) {
				counterElement.className = 'char-counter mt-2 text-right text-yellow-600 font-medium';
			} else {
				counterElement.className = 'char-counter mt-2 text-right text-gray-500';
			}
		};

		messageTextarea.addEventListener('input', updateCharCounter);
		updateCharCounter();
	}

	// Loading state
	if (form && submitButton) {
		form.addEventListener('submit', () => {
			submitButton.disabled = true;

			const btnText = submitButton.querySelector('.btn-text') as HTMLElement;
			const btnLoading = submitButton.querySelector('.btn-loading') as HTMLElement;

			if (btnText) btnText.style.display = 'none';
			if (btnLoading) {
				btnLoading.style.display = 'inline';
				btnLoading.textContent = 'Sending...';
			}

			setTimeout(() => {
				submitButton.disabled = false;
				if (btnText) btnText.style.display = 'inline';
				if (btnLoading) btnLoading.style.display = 'none';
			}, 10000);
		});
	}
</script>
